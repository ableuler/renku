name: Deploy and Test

on:
  push:
    paths:
    - charts/**
    - scripts/**
    - acceptance-tests/**
    - .github/**
    branches: ['master', '1393-helm3-cd']
    tags: ['*']

jobs:
  github-env:
    runs-on: ubuntu-latest
    steps:
    - name: get environment
      run: env
  deploy:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
    - uses: actions/setup-python@v1
      with:
        python-version: 3.7
    - name: Install dependencies
      run: |
        sudo apt-get update -y && sudo apt-get install -y snapd
        sudo snap install kubectl --channel=1.16/stable --classic
        sudo snap install helm --channel=3.3/stable --classic
        echo "::set-env name=PATH::/snap/bin:$PATH"
        pip install --upgrade pip pipenv
        pipenv install --deploy --dev --system
    - name: Deploy master to dev
      env:
        KUBECONFIG: ${{ github.workspace }}/renkubot-kube.config
        RENKUBOT_KUBECONFIG: ${{ secrets.RENKUBOT_KUBECONFIG }}
        CD_VALUES: ${{ secrets.CD_VALUES }}
      run: |
        echo "$RENKUBOT_KUBECONFIG" > renkubot-kube.config
        helm repo add stable 	https://kubernetes-charts.storage.googleapis.com
        helm repo add renku https://swissdatasciencecenter.github.io/helm-charts/
        helm repo add gitlab https://charts.gitlab.io/
        helm repo add jupyterhub https://jupyterhub.github.io/helm-chart
        rm -rf charts/renku/charts
        helm dependency update charts/renku
        printf "%s" "$CD_VALUES" > cd_values.yaml
        helm upgrade --install renku \
                    --namespace renku \
                    -f cd_values.yaml \
                    --timeout 1800s \
                    --cleanup-on-fail \
                    --dry-run \
                    charts/renku
    - name: Turn on anonymous notebooks
      env:
        KUBECONFIG: ${{ github.workspace }}/renkubot-kube.config
        RENKUBOT_KUBECONFIG: ${{ secrets.RENKUBOT_KUBECONFIG }}
      run: |
        echo "$RENKUBOT_KUBECONFIG" > renkubot-kube.config
        charts/deploy-tmp-notebooks.py --release-name renku --renku-namespace renku --no-deploy
    - name: Notify slack
      if: success()
      env:
        RENKU_SLACK_BOT_TOKEN: ${{ secrets.RENKU_SLACK_BOT_TOKEN }}
      run: |
        curl -X POST https://slack.com/api/chat.postMessage \
             -H "Authorization: Bearer $RENKU_SLACK_BOT_TOKEN" \
             --data "channel=C9U45DL1H" \
             --data "text=https://dev.renku.ch has been updated! :tada:"
  test:
    runs-on: ubuntu-latest
    needs: deploy
    steps:
    - uses: actions/checkout@v2
    - uses: actions/setup-python@v1
      with:
        python-version: 3.7
    - name: Install dependencies
      run: |
        sudo apt-get update -y && sudo apt-get install -y grep
        pip install yq
    - name: Test
      env:
        RENKU_BOT_DEV_PASSWORD: ${{ secrets.RENKU_BOT_DEV_PASSWORD }}
      run: |
        RENKU_PYTHON_VERSION=v$(cat ./charts/renku/requirements.yaml | yq -r '.dependencies[] | select(.name == "renku-core") | .version')
        RENKU_PYTHON_COMMIT=$(echo $RENKU_PYTHON_VERSION | grep -o -P '(?<=-)[0-9a-fA-F]+') || true
        if [ $RENKU_PYTHON_COMMIT ]; then export RENKU_PYTHON_VERSION=$RENKU_PYTHON_COMMIT; fi
        echo "Passing renku-python version $RENKU_PYTHON_VERSION"

        cd acceptance-tests
        COMPOSE_DOCKER_CLI_BUILD=1 DOCKER_BUILDKIT=1 docker-compose build --build-arg renku_python_ref=${RENKU_PYTHON_VERSION} sbt
        docker-compose run -e RENKU_TEST_URL=https://dev.renku.ch \
                           -e RENKU_TEST_FULL_NAME="Renku Bot" \
                           -e RENKU_TEST_EMAIL="renku@datascience.ch" \
                           -e RENKU_TEST_USERNAME="renku-test" \
                           -e RENKU_TEST_PASSWORD="$RENKU_BOT_DEV_PASSWORD" sbt
    - name: Notify slack
      if: failure()
      env:
        RENKU_SLACK_BOT_TOKEN: ${{ secrets.RENKU_SLACK_BOT_TOKEN }}
      run: |
        curl -X POST https://slack.com/api/chat.postMessage \
             -H "Authorization: Bearer $RENKU_SLACK_BOT_TOKEN" \
             --data "channel=C9U45DL1H" \
             --data "text=Acceptance tests on https://dev.renku.ch failed! :scream_cat:"
    - name: Prepare artifact for packaging on failure
      if: failure()
      run: |
        mkdir acceptance-tests/test-artifacts
        cp acceptance-tests/target/*.png acceptance-tests/test-artifacts 2>/dev/null || :
        cp acceptance-tests/target/*.log acceptance-tests/test-artifacts 2>/dev/null || :
        sudo rm -rf acceptance-tests/target/20*/.renku/cache 2>/dev/null || :
        cp -r acceptance-tests/target/20* acceptance-tests/test-artifacts 2>/dev/null || :
    - name: Upload screenshots on failure
      if: failure()
      uses: actions/upload-artifact@v1
      with:
        name: test-artifacts
        path: acceptance-tests/test-artifacts
  chart:
    needs: test
    runs-on: ubuntu-latest
    if: "startsWith(github.ref, 'refs/tags/') || github.ref == 'refs/heads/master'"
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-python@v1
        with:
          python-version: 3.7
      - name: Docker Login
        uses: Azure/docker-login@v1
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
      - name: Configure build
        run: |
          python -m pip install --upgrade pip pipenv
          pipenv install --deploy --system --dev
          git config --global user.name renku-bot
          git config --global user.email renku@datascience.ch
      - name: update and test chart
        env:
          HELM_URL: https://storage.googleapis.com/kubernetes-helm
          HELM_TGZ: helm-v2.16.1-linux-amd64.tar.gz
          TEMP_DIR: ${{ runner.temp }}
        run: |
          PATH=${{ runner.temp }}/linux-amd64/:$PATH
          scripts/install-helm.sh
          helm dep update charts/renku
          helm dep update charts/gitlab
      - name: Push helm chart and images
        if: github.ref == 'refs/heads/master' && !startsWith(github.ref, 'refs/tags/')
        env:
          GITHUB_TOKEN: ${{ secrets.RENKU_CI_TOKEN }}
          DOCKER_BUILDKIT: "1"
        run: |
          cd charts
          chartpress --push --publish-chart
          chartpress --push --tag latest
      - name: Push tagged helm chart and images
        if: startsWith(github.ref, 'refs/tags/')
        env:
          GITHUB_TOKEN: ${{ secrets.RENKU_CI_TOKEN }}
        run: |
          cd charts
          chartpress --push --publish-chart --tag $(echo ${GITHUB_REF} | cut -d'/' -f 3)
